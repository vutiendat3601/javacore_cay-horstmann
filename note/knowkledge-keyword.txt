Chapter 3 _ Fundamentals:
    - Data types
    - Variables
    - Operators
    - Strings
    - Input and Output
    - Control Flow
    - BigNumber class
    - Arrays

Chapter 4 _ Objects And Classes:
    - What is OOP?
    - Objects, class, reference
    - Encapsulation
    - Objects variables, this keyword
    - LocalDate
    - Mutator and Accessor Method
    - Static Field, Static Constant and Static Method
    - Method parameter
    - Factory Method
    - Overloading
    - Default/Explicit Field Initialization, Constructor, Initialization Block
    - Package
    - Import, Static import

Chapter 5 _ Inheritance:
    - Superclass, subclass
    - Overriding
    - Subclass constructor, super keyword
    - Inheritance hierarchy
    - Polymorphism
    - Final class, final method
    - Casting, instanceof keyword
    - Abstract class
    - Protected access
    - Objects class:
        + equals(), hashCode(), toString();
    - Generic ArrayList
        + add(), remove(), set(), get(), size(), ensureCapacity(), trimToSize()
    - Wrapper and Autoboxing
    - Method with variables parameter
    - Enumeration class

Chapter 6 _ Interface:
    - Interface
    - Lambda Expression
    - Inner class, anonymous inner class
    - Static/default method in interface
    - Callbacks and interface
    - Comparator interface
    - Object Cloning, Clonable interface
    - Lambda expression, functional interface, method reference
    - Some common functional interface:
        + Runnable, Supplier<T>, Consumer<T>, BiConsumer<T, U>, Function<T, R>,
        BiFunction<T, U, R>, UnaryOperator<T>, BinaryOperator<T>, Predicate<T>,
        BiPredicate<T, U>

    - Some common functional interface for primitive types:
        // p, q is int, long, double
        // P, Q is Int, Long, Double
        + BooleanSupplier, PSupplier, PConsumer, PConsumer<T>, PFunction<T>, PToQFunction
        ToPFunction<T>, ToPBiFunction<T, U>, PUnaryOperator, PBinaryOperator, PPredicate

Chapter 7 _ Exception:
    - Throwable, Error, Exception, IOException, RuntimeException
    - Create an Exception class
    - Catching an Exception -> try/catch/finally
    - Try-with-resource statement (Autoclosable interface)

        
